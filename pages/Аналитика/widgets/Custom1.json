{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "0.375rem",
  "borderWidth": "0",
  "bottomRow": 126,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{utils.customWidgetData()}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    },
    {
      "key": "isVisible"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [
    {
      "key": "isVisible"
    }
  ],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "hideCard": false,
  "iconSVG": "https://appcdn.appsmith.com/static/media/icon.ff37253a5ce2f5284c42ede26ce165f9.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": "{{summary.data[0].bets > 0 && Select_participant.isValid}}",
  "key": "krvw8yv6jy",
  "leftColumn": 0,
  "maxDynamicHeight": 99,
  "minDynamicHeight": 4,
  "mobileBottomRow": 319,
  "mobileLeftColumn": 11,
  "mobileRightColumn": 34,
  "mobileTopRow": 289,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 14.234375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "/* Google fonts - Open Sans */\n@import url(https://fonts.googleapis.com/css?family=Nunito+Sans:400,700);\n.app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n}\n\ndiv {\n  color: rgba(255, 255, 255, 0.9);\n}\n\nbody {\n  background: #18181b;\n  font-family: \"Nunito Sans\", sans-serif;\n}\n\ntable {\n  border-collapse: collapse;\n  font-weight: bold;\n}\n\ntable, th, td {\n  border: 0.5px solid black;\n}\n\nth {\n  background-color: #726f69;\n  height: 35px;\n  font-size: 12px;\n  line-height: 1.2;\n}\n\ntd {\n  background: #3a3936;\n  font-size: 11px;\n  height: 25px;\n  line-height: 1.2;\n}\n\ntd:not(.place-cellData, .index-cellData) {\n  padding-left: 5px;\n}\n\na {\n  color: rgba(255, 255, 255, 0.9);\n}\n\na:hover {\n  color: rgba(209, 212, 199, 0.9);\n}\n\n.tableTitle {\n  text-align: center;\n  font-size: 12px;\n  font-weight: bold;\n  padding-top: 5px;\n  padding-bottom: 10px;\n}\n\n.winning-strick {\n  float: left;\n  padding-right: 30px;\n}\n\n.th-nickname {\n  min-width: 50px;\n}\n\n.th-contest {\n  width: 140px;\n}\n\n.biggest-odds {\n  width: 220px;\n}\n\n.place-cellData, .index-cellData {\n  min-width: 15px;\n  text-align: center;\n}\n\n.five-contests-points {\n  max-width: 40px;\n}\n\n.container {\n  display: flex;\n}\n\n.winning-streak-table {\n  width: 49%;\n}\n\n.current-streak-table {\n  width: 49%;\n  margin-left: auto;\n}\n\n.dop-stavki-table {\n  width: 49%;\n}\n\n.dop-stavki-description {\n  margin-top: 10px;\n  margin-right: 2%;\n  margin-left: 2%;\n  text-align: justify;\n  font-size: 11px;\n  font-weight: bold;\n  line-height: 1.5;\n}\n\n.biggest-odd-table {\n  width: 49%;\n  margin-right: auto;\n}\n\n.strick_avg_odds {\n  max-width: 40px;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState } from 'https://cdn.jsdelivr.net/npm/react@19.0.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@19.0.0/+esm';\nimport { createRoot } from 'https://cdn.jsdelivr.net/npm/react-dom@19.0.0/client/+esm';\nclass TableBuilder extends React.Component {\n  renderTableHeaders(headers, data) {\n    // Do not render headers if table has no data\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return null;\n    }\n    return headers.map((headerRow, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: rowIndex\n    }, headerRow.map((headerItem, colIndex) => {\n      const {\n        header,\n        accessor,\n        rowspan = 1,\n        colspan = 1\n      } = headerItem;\n      if (colspan > 1) {\n        return /*#__PURE__*/React.createElement(\"th\", {\n          key: colIndex,\n          colSpan: colspan,\n          class: accessor\n        }, header);\n      } else {\n        return /*#__PURE__*/React.createElement(\"th\", {\n          key: colIndex,\n          rowSpan: rowspan,\n          class: accessor\n        }, header);\n      }\n    })));\n  }\n  renderTableRows(data) {\n    // Do not render rows if table has no data\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return null;\n    }\n\n    // Saving field names to use them as class names for table fields\n    const keys = Object.keys(data[0]);\n    const classNames = keys.map(key => key + \"-cellData\");\n    return data.map((row, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index\n    }, Object.values(row).map((cell, cellIndex) => /*#__PURE__*/React.createElement(\"td\", {\n      key: cellIndex,\n      class: classNames[cellIndex],\n      dangerouslySetInnerHTML: {\n        __html: cell\n      }\n    }))));\n  }\n  render() {\n    const {\n      data\n    } = this.props;\n    const {\n      headers\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"table\", {\n      style: {\n        width: '100%'\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", null, this.renderTableHeaders(headers, data)), /*#__PURE__*/React.createElement(\"tbody\", null, this.renderTableRows(data)));\n  }\n}\nexport default TableBuilder;\nfunction App() {\n  const [summary, setSummary] = useState(appsmith.model.summary);\n  const [bySport, setBySport] = useState(appsmith.model.bySport);\n  const [byMarket, setByMarket] = useState(appsmith.model.byMarket);\n  const [byOdds, setByOdds] = useState(appsmith.model.byOdds);\n  appsmith.onModelChange(() => {\n    if (summary !== appsmith.model.summary) {\n      setSummary(appsmith.model.summary);\n    }\n    if (bySport !== appsmith.model.bySport) {\n      setBySport(appsmith.model.bySport);\n    }\n    if (byMarket !== appsmith.model.byMarket) {\n      setByMarket(appsmith.model.byMarket);\n    }\n    if (byOdds !== appsmith.model.byOdds) {\n      setByOdds(appsmith.model.byOdds);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, summary && summary.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", null), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"tableTitle\"\n  }, \"\\u041E\\u0431\\u0449\\u0430\\u044F \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\")), summary && summary.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableBuilder, {\n    data: summary,\n    headers: [[{\n      header: 'Bets',\n      accessor: 'bets'\n    }, {\n      header: 'Won',\n      accessor: 'won'\n    }, {\n      header: 'Lost',\n      accessor: 'lost'\n    }, {\n      header: 'Void',\n      accessor: 'void'\n    }, {\n      header: 'Units',\n      accessor: 'units'\n    }, {\n      header: 'ROI',\n      accessor: 'roi'\n    }]]\n  })), bySport && bySport.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", null), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"tableTitle\"\n  }, \"\\u041F\\u043E \\u0432\\u0438\\u0434\\u0430\\u043C \\u0441\\u043F\\u043E\\u0440\\u0442\\u0430\")), bySport && bySport.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableBuilder, {\n    data: bySport,\n    headers: [[{\n      header: '',\n      accessor: 'index'\n    }, {\n      header: 'Sport',\n      accessor: 'sport'\n    }, {\n      header: 'Bets',\n      accessor: 'bets'\n    }, {\n      header: 'Won',\n      accessor: 'won'\n    }, {\n      header: 'Lost',\n      accessor: 'lost'\n    }, {\n      header: 'Void',\n      accessor: 'void'\n    }, {\n      header: 'Units',\n      accessor: 'units'\n    }, {\n      header: 'ROI',\n      accessor: 'roi'\n    }]]\n  })), byMarket && byMarket.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", null), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"tableTitle\"\n  }, \"\\u041F\\u043E \\u043B\\u0438\\u043D\\u0438\\u044F\\u043C\")), byMarket && byMarket.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableBuilder, {\n    data: byMarket,\n    headers: [[{\n      header: '',\n      accessor: 'index'\n    }, {\n      header: 'Market',\n      accessor: 'market'\n    }, {\n      header: 'Bets',\n      accessor: 'bets'\n    }, {\n      header: 'Won',\n      accessor: 'won'\n    }, {\n      header: 'Lost',\n      accessor: 'lost'\n    }, {\n      header: 'Void',\n      accessor: 'void'\n    }, {\n      header: 'Units',\n      accessor: 'units'\n    }, {\n      header: 'ROI',\n      accessor: 'roi'\n    }]]\n  })), byOdds && byOdds.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", null), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"tableTitle\"\n  }, \"\\u041F\\u043E \\u043A\\u043E\\u044D\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043D\\u0442\\u0430\\u043C\")), byOdds && byOdds.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableBuilder, {\n    data: byOdds,\n    headers: [[{\n      header: '',\n      accessor: 'index'\n    }, {\n      header: 'Odds',\n      accessor: 'odds'\n    }, {\n      header: 'Bets',\n      accessor: 'bets'\n    }, {\n      header: 'Won',\n      accessor: 'won'\n    }, {\n      header: 'Lost',\n      accessor: 'lost'\n    }, {\n      header: 'Void',\n      accessor: 'void'\n    }, {\n      header: 'Units',\n      accessor: 'units'\n    }, {\n      header: 'ROI',\n      accessor: 'roi'\n    }]]\n  })));\n}\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n  const root = createRoot(document.getElementById('root'));\n  root.render(/*#__PURE__*/React.createElement(App, null));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "https://appcdn.appsmith.com/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 26,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* Google fonts - Open Sans */\n@import url(https://fonts.googleapis.com/css?family=Nunito+Sans:400,700);\n\n.app {\n\theight: calc(var(--appsmith-ui-height) * 1px);\n\twidth: calc(var(--appsmith-ui-width) * 1px);\n\tjustify-content: center;\n\tborder-radius: var(--appsmith-theme-borderRadius);\n\tbox-shadow: var(--appsmith-theme-boxShadow);\n}\n\ndiv {\n    color: rgba(255, 255, 255, 0.9);\n}\n\nbody {\n    background: #18181b;\n    font-family: \"Nunito Sans\", sans-serif;\n  }\n\ntable {\n\t\tborder-collapse: collapse;\n    font-weight: bold;\n}\n\ntable, th, td {\n    border: 0.5px solid black;\n}\n\nth {\n    background-color: #726f69;\n    height: 35px;\n    font-size: 12px;\n\t\tline-height: 1.2\n  }\n\ntd {\n    background: #3a3936;\n    font-size: 11px;\n    height: 25px;\n\t\tline-height: 1.2\n  }\n\ntd:not(.place-cellData,  .index-cellData) {\n\tpadding-left: 5px;\n}\n\na {\n    color: rgba(255, 255, 255, 0.9);\n}\n\na:hover {\n    color: rgba(209, 212, 199, 0.9); \n}\n\n.tableTitle {\n\ttext-align: center;\n\tfont-size: 12px;\n\tfont-weight: bold;\n\tpadding-top: 5px;\n\tpadding-bottom: 10px;\n}\n\n.winning-strick {\n    float: left;\n    padding-right: 30px;\n}\n\n.th-nickname {\n    min-width: 50px;\n}\n\n.th-contest {\n    width: 140px;\n}\n\n.biggest-odds {\n    width: 220px;\n}\n\n.place-cellData,  .index-cellData {\n    min-width: 15px;\n\t\ttext-align: center;\n}\n\n.five-contests-points {\n    max-width: 40px;\n  }\n\n.container {\n\tdisplay: flex;\n}\n\n.winning-streak-table {\n\twidth: 49%;\n}\n\n.current-streak-table {\n\twidth: 49%;\n\tmargin-left: auto;\n}\n\n.dop-stavki-table {\n\twidth: 49%;\n}\n\n.dop-stavki-description {\n\tmargin-top: 10px;\n\t// width: 46%;\n\tmargin-right: 2%;\n\tmargin-left: 2%;\n\ttext-align: justify;\n\tfont-size: 11px;\n\tfont-weight: bold;\n\tline-height: 1.5\n}\n\n.biggest-odd-table {\n\twidth: 49%;\n\tmargin-right: auto;\n}\n\n.strick_avg_odds {\n\tmax-width: 40px\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, {useState} from 'https://cdn.jsdelivr.net/npm/react@19.0.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@19.0.0/+esm';\nimport { createRoot } from 'https://cdn.jsdelivr.net/npm/react-dom@19.0.0/client/+esm';\n\nclass TableBuilder extends React.Component {\n\n\trenderTableHeaders(headers, data) {\n\n\t\t// Do not render headers if table has no data\n\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn headers.map((headerRow, rowIndex) => (\n\t\t\t<tr key={rowIndex}>\n\t\t\t\t{headerRow.map((headerItem, colIndex) => {\n\t\t\t\t\tconst { header, accessor, rowspan = 1, colspan = 1 } = headerItem;\n\t\t\t\t\tif (colspan > 1) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<th key={colIndex} colSpan={colspan} class={accessor}>\n\t\t\t\t\t\t\t\t{header}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<th key={colIndex} rowSpan={rowspan} class={accessor}>\n\t\t\t\t\t\t\t\t{header}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t</tr>\n\t\t));\n\t}\n\n\trenderTableRows(data) {\n\n\t\t// Do not render rows if table has no data\n\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Saving field names to use them as class names for table fields\n\t\tconst keys = Object.keys(data[0]);\n\t\tconst classNames = keys.map(key => key + \"-cellData\");\n\n\t\treturn data.map((row, index) => (\n\t\t\t<tr key={index}>\n\t\t\t\t{Object.values(row).map((cell, cellIndex) => (\n\t\t\t\t\t<td key={cellIndex} class={classNames[cellIndex]} dangerouslySetInnerHTML={{ __html: cell }}></td>\n\t\t\t\t))}\n\t\t\t</tr>\n\t\t));\n\t}\n\n\trender() {\n\t\tconst { data } = this.props;\n\t\tconst { headers } = this.props;\n\t\treturn (\n\t\t\t<table style={{ width: '100%' }}>\n\t\t\t\t<thead>\n\t\t\t\t\t{this.renderTableHeaders(headers, data)}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.renderTableRows(data)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n}\n\nexport default TableBuilder;\n\nfunction App() {\n\n\tconst [summary, setSummary] = useState(appsmith.model.summary);\n\tconst [bySport, setBySport] = useState(appsmith.model.bySport);\n\tconst [byMarket, setByMarket] = useState(appsmith.model.byMarket);\n\tconst [byOdds, setByOdds] = useState(appsmith.model.byOdds);\n\n\tappsmith.onModelChange(() => {\n\n\t\tif (summary !== appsmith.model.summary) {\n\t\t\tsetSummary(appsmith.model.summary);\n\t\t}\n\n\t\tif (bySport !== appsmith.model.bySport) {\n\t\t\tsetBySport(appsmith.model.bySport);\n\t\t}\n\n\t\tif (byMarket !== appsmith.model.byMarket) {\n\t\t\tsetByMarket(appsmith.model.byMarket);\n\t\t}\n\n\t\tif (byOdds !== appsmith.model.byOdds) {\n\t\t\tsetByOdds(appsmith.model.byOdds);\n\t\t}\n\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t{summary && summary.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<hr></hr>\n\t\t\t\t\t<div class='tableTitle'>Общая информация</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{summary && summary.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<TableBuilder\n\t\t\t\t\t\tdata={summary}\n\t\t\t\t\t\theaders={[\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ header: 'Bets', accessor: 'bets' },\n\t\t\t\t\t\t\t\t{ header: 'Won', accessor: 'won' },\n\t\t\t\t\t\t\t\t{ header: 'Lost', accessor: 'lost' },\n\t\t\t\t\t\t\t\t{ header: 'Void', accessor: 'void' },\n\t\t\t\t\t\t\t\t{ header: 'Units', accessor: 'units' },\n\t\t\t\t\t\t\t\t{ header: 'ROI', accessor: 'roi' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{bySport && bySport.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<hr></hr>\n\t\t\t\t\t<div class='tableTitle'>По видам спорта</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{bySport && bySport.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<TableBuilder\n\t\t\t\t\t\tdata={bySport}\n\t\t\t\t\t\theaders={[\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ header: '', accessor: 'index' },\n\t\t\t\t\t\t\t\t{ header: 'Sport', accessor: 'sport' },\n\t\t\t\t\t\t\t\t{ header: 'Bets', accessor: 'bets' },\n\t\t\t\t\t\t\t\t{ header: 'Won', accessor: 'won' },\n\t\t\t\t\t\t\t\t{ header: 'Lost', accessor: 'lost' },\n\t\t\t\t\t\t\t\t{ header: 'Void', accessor: 'void' },\n\t\t\t\t\t\t\t\t{ header: 'Units', accessor: 'units' },\n\t\t\t\t\t\t\t\t{ header: 'ROI', accessor: 'roi' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{byMarket && byMarket.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<hr></hr>\n\t\t\t\t\t<div class='tableTitle'>По линиям</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{byMarket && byMarket.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<TableBuilder\n\t\t\t\t\t\tdata={byMarket}\n\t\t\t\t\t\theaders={[\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ header: '', accessor: 'index' },\n\t\t\t\t\t\t\t\t{ header: 'Market', accessor: 'market' },\n\t\t\t\t\t\t\t\t{ header: 'Bets', accessor: 'bets' },\n\t\t\t\t\t\t\t\t{ header: 'Won', accessor: 'won' },\n\t\t\t\t\t\t\t\t{ header: 'Lost', accessor: 'lost' },\n\t\t\t\t\t\t\t\t{ header: 'Void', accessor: 'void' },\n\t\t\t\t\t\t\t\t{ header: 'Units', accessor: 'units' },\n\t\t\t\t\t\t\t\t{ header: 'ROI', accessor: 'roi' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{byOdds && byOdds.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<hr></hr>\n\t\t\t\t\t<div class='tableTitle'>По коэффициентам</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{byOdds && byOdds.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<TableBuilder\n\t\t\t\t\t\tdata={byOdds}\n\t\t\t\t\t\theaders={[\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ header: '', accessor: 'index' },\n\t\t\t\t\t\t\t\t{ header: 'Odds', accessor: 'odds' },\n\t\t\t\t\t\t\t\t{ header: 'Bets', accessor: 'bets' },\n\t\t\t\t\t\t\t\t{ header: 'Won', accessor: 'won' },\n\t\t\t\t\t\t\t\t{ header: 'Lost', accessor: 'lost' },\n\t\t\t\t\t\t\t\t{ header: 'Void', accessor: 'void' },\n\t\t\t\t\t\t\t\t{ header: 'Units', accessor: 'units' },\n\t\t\t\t\t\t\t\t{ header: 'ROI', accessor: 'roi' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\n\t);\n}\n\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n\tconst root = createRoot(document.getElementById('root'));\n\troot.render(<App />);\n});\n"
  },
  "version": 1,
  "widgetId": "226n8kkw0z",
  "widgetName": "Custom1"
}