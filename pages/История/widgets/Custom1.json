{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "0.375rem",
  "borderWidth": "0",
  "bottomRow": 85,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{utils.customWidgetData()}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "hideCard": false,
  "iconSVG": "https://appcdn.appsmith.com/static/media/icon.ff37253a5ce2f5284c42ede26ce165f9.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "krvw8yv6jy",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 319,
  "mobileLeftColumn": 11,
  "mobileRightColumn": 34,
  "mobileTopRow": 289,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 14.234375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "/* Google fonts - Open Sans */\n@import url(https://fonts.googleapis.com/css?family=Nunito+Sans:400,700);\n.app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n}\n\ndiv {\n  color: rgba(255, 255, 255, 0.9);\n}\n\nbody {\n  background: #18181b;\n  font-family: \"Nunito Sans\", sans-serif;\n  width: 1000px;\n}\n\ntable {\n  border-collapse: collapse;\n  font-weight: bold;\n}\n\ntable, th, td {\n  border: 0.5px solid black;\n}\n\nth {\n  background-color: #726f69;\n  height: 35px;\n  font-size: 12px;\n  line-height: 1.2;\n}\n\ntd {\n  background: #3a3936;\n  font-size: 11px;\n  height: 25px;\n  line-height: 1.2;\n}\n\ntd:not(.index-cellData) {\n  padding-left: 5px;\n}\n\n.tableTitle {\n  text-align: left;\n  font-size: 12px;\n  font-weight: bold;\n  padding-top: 5px;\n  padding-bottom: 10px;\n  padding-left: 150px;\n}\n\n.index,\n.index-cellData {\n  width: 20px;\n  text-align: center;\n  position: sticky;\n  left: 0px;\n  z-index: 1;\n}\n\n.contest,\n.Contest-cellData {\n  max-width: 100px;\n  position: sticky;\n  left: 20px;\n  z-index: 1;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nclass TableBuilder extends React.Component {\n  renderTableHeaders(headers, data) {\n    // Do not render headers if table has no data\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return null;\n    }\n    return headers.map((headerRow, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: rowIndex\n    }, headerRow.map((headerItem, colIndex) => {\n      const {\n        header,\n        accessor,\n        rowspan = 1,\n        colspan = 1\n      } = headerItem;\n      if (colspan > 1) {\n        return /*#__PURE__*/React.createElement(\"th\", {\n          key: colIndex,\n          colSpan: colspan,\n          class: accessor\n        }, header);\n      } else {\n        return /*#__PURE__*/React.createElement(\"th\", {\n          key: colIndex,\n          rowSpan: rowspan,\n          class: accessor\n        }, header);\n      }\n    })));\n  }\n  renderTableRows(data) {\n    // Do not render rows if table has no data\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return null;\n    }\n\n    // Saving field names to use them as class names for table fields\n    const keys = Object.keys(data[0]);\n    const classNames = keys.map(key => key + \"-cellData\");\n    return data.map((row, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index\n    }, Object.values(row).map((cell, cellIndex) => /*#__PURE__*/React.createElement(\"td\", {\n      key: cellIndex,\n      class: classNames[cellIndex],\n      dangerouslySetInnerHTML: {\n        __html: cell\n      }\n    }))));\n  }\n  render() {\n    const {\n      data\n    } = this.props;\n    const {\n      headers\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"table\", {\n      style: {\n        width: '100%'\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", null, this.renderTableHeaders(headers, data)), /*#__PURE__*/React.createElement(\"tbody\", null, this.renderTableRows(data)));\n  }\n}\nexport default TableBuilder;\nfunction App() {\n  const [resultsHistory, setResultsHistory] = useState(appsmith.model.resultsHistory);\n  appsmith.onModelChange(() => {\n    if (resultsHistory !== appsmith.model.resultsHistory) {\n      setResultsHistory(appsmith.model.resultsHistory);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"tableTitle\"\n  }, \"\\u0422\\u0430\\u0431\\u043B\\u0438\\u0446\\u0430 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u043E\\u0432\"), /*#__PURE__*/React.createElement(TableBuilder, {\n    data: resultsHistory,\n    headers: [[{\n      header: '',\n      accessor: 'index',\n      rowspan: 2\n    }, {\n      header: 'Contest',\n      accessor: 'contest',\n      rowspan: 2\n    }, {\n      header: 'Winner',\n      accessor: 'nickname',\n      rowspan: 2\n    }, {\n      header: '2nd place',\n      accessor: 'nickname',\n      rowspan: 2\n    }, {\n      header: '3rd place',\n      accessor: 'nickname',\n      rowspan: 2\n    }, {\n      header: 'Biggest Odds',\n      accessor: 'biggest-odds',\n      rowspan: 2\n    }, {\n      header: 'Streak',\n      accessor: 'nickname',\n      rowspan: 2\n    }, {\n      header: 'Month 1',\n      colspan: 3\n    }, {\n      header: 'Month 2',\n      colspan: 3\n    }], [{\n      header: 'Winner',\n      accessor: 'nickname'\n    }, {\n      header: '2nd place',\n      accessor: 'nickname'\n    }, {\n      header: '3rd place',\n      accessor: 'nickname'\n    }, {\n      header: 'Winner',\n      accessor: 'nickname'\n    }, {\n      header: '2nd place',\n      accessor: 'nickname'\n    }, {\n      header: '3rd place',\n      accessor: 'nickname'\n    }]]\n  }));\n}\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n  reactDom.render( /*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "https://appcdn.appsmith.com/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 5,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* Google fonts - Open Sans */\n@import url(https://fonts.googleapis.com/css?family=Nunito+Sans:400,700);\n\n.app {\n\theight: calc(var(--appsmith-ui-height) * 1px);\n\twidth: calc(var(--appsmith-ui-width) * 1px);\n\tjustify-content: center;\n\tborder-radius: var(--appsmith-theme-borderRadius);\n\tbox-shadow: var(--appsmith-theme-boxShadow);\n}\n\ndiv {\n    color: rgba(255, 255, 255, 0.9);\n}\n\nbody {\n    background: #18181b;\n    font-family: \"Nunito Sans\", sans-serif;\n\t\twidth: 1000px;\n  }\n\ntable {\n\t\tborder-collapse: collapse;\n    font-weight: bold;\n}\n\ntable, th, td {\n    border: 0.5px solid black;\n}\n\nth {\n    background-color: #726f69;\n    height: 35px;\n    font-size: 12px;\n\t\tline-height: 1.2\n  }\n\ntd {\n    background: #3a3936;\n    font-size: 11px;\n    height: 25px;\n\t\tline-height: 1.2\n  }\n\ntd:not(.index-cellData) {\n\tpadding-left: 5px;\n}\n\n.tableTitle {\n\ttext-align: left;\n\tfont-size: 12px;\n\tfont-weight: bold;\n\tpadding-top: 5px;\n\tpadding-bottom: 10px;\n\tpadding-left: 150px;\n}\n\n.index,\n.index-cellData\n{\n\twidth: 20px;\n\ttext-align: center;\n\tposition: sticky;\n  left: 0px;\n  z-index: 1;\n}\n\n.contest,\n.Contest-cellData,\n{\n\tmax-width: 100px;\n  position: sticky;\n  left: 20px;\n  z-index: 1;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, {useState} from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nclass TableBuilder extends React.Component {\n\t\n\t renderTableHeaders(headers, data) {\n\t\t\n\t\t// Do not render headers if table has no data\n\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n      return null;\n    }\n\t\t \n    return headers.map((headerRow, rowIndex) => (\n      <tr key={rowIndex}>\n        {headerRow.map((headerItem, colIndex) => {\n          const { header, accessor, rowspan = 1, colspan = 1 } = headerItem;\n          if (colspan > 1) {\n            return (\n              <th key={colIndex} colSpan={colspan} class={accessor}>\n                {header}\n              </th>\n            );\n          } else {\n            return (\n              <th key={colIndex} rowSpan={rowspan} class={accessor}>\n                {header}\n              </th>\n            );\n          }\n        })}\n      </tr>\n    ));\n  }\n\t\n\trenderTableRows(data) {\n\t\t\n\t\t// Do not render rows if table has no data\n\t\tif (!data || !Array.isArray(data) || data.length === 0) {\n      return null;\n    }\n\t\t\n\t\t// Saving field names to use them as class names for table fields\n\t\tconst keys = Object.keys(data[0]);\n\t\tconst classNames = keys.map(key => key + \"-cellData\");\n\t\t\n    return data.map((row, index) => (\n      <tr key={index}>\n        {Object.values(row).map((cell, cellIndex) => (\n          <td key={cellIndex} class={classNames[cellIndex]} dangerouslySetInnerHTML={{ __html: cell }}></td>\n        ))}\n      </tr>\n    ));\n  }\n\n  render() {\n    const { data } = this.props;\n\t\tconst { headers } = this.props;\n    return (\n      <table style={{ width: '100%' }}>\n        <thead>\n\t\t\t\t\t {this.renderTableHeaders(headers, data)}\n        </thead>\n        <tbody>\n          {this.renderTableRows(data)}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default TableBuilder;\n\nfunction App() {\n\t\n\tconst [resultsHistory, setResultsHistory] = useState(appsmith.model.resultsHistory);\n\t\n\tappsmith.onModelChange(() => {\n\t\t\n\t\tif(resultsHistory !== appsmith.model.resultsHistory) {\n\t\t\tsetResultsHistory(appsmith.model.resultsHistory);\n\t\t}\n\t\t\n\t});\n\t\n  return (\n    <div>\n\t\t\t<div class='tableTitle'>Таблица результатов</div>\n      <TableBuilder \n\t\t\t\tdata={resultsHistory} \n\t\t\t\theaders={[\n\t\t\t\t\t[\n\t\t\t\t\t\t{ header: '', accessor: 'index', rowspan: 2 },\n\t\t\t\t\t\t{ header: 'Contest', accessor: 'contest', rowspan: 2 },\n\t\t\t\t\t\t{ header: 'Winner', accessor: 'nickname', rowspan: 2 },\n\t\t\t\t\t\t{ header: '2nd place', accessor: 'nickname', rowspan: 2 },\n\t\t\t\t\t\t{ header: '3rd place', accessor: 'nickname', rowspan: 2 },\n\t\t\t\t\t\t{ header: 'Biggest Odds', accessor: 'biggest-odds', rowspan: 2 },\n\t\t\t\t\t\t{ header: 'Streak', accessor: 'nickname', rowspan: 2 },\n\t\t\t\t\t\t{ header: 'Month 1', colspan: 3 },\n\t\t\t\t\t\t{ header: 'Month 2', colspan: 3 }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t{ header: 'Winner', accessor: 'nickname'},\n\t\t\t\t\t\t{ header: '2nd place', accessor: 'nickname' },\n\t\t\t\t\t\t{ header: '3rd place', accessor: 'nickname' },\n\t\t\t\t\t\t{ header: 'Winner', accessor: 'nickname'},\n\t\t\t\t\t\t{ header: '2nd place', accessor: 'nickname' },\n\t\t\t\t\t\t{ header: '3rd place', accessor: 'nickname' }\n\t\t\t\t\t]\n\t\t\t\t]}\n\t\t\t/>\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n  reactDom.render(<App />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "ox2ung47ds",
  "widgetName": "Custom1"
}